}
return(count)
}
res <- NULL
for(i in 1:10000){
res <- c(res, run_sim(24,8))
}
hist(res)
summary(res)
density(res)
plot(density(res))
table(anemia$death)
table(anaemia$death)
knitr::opts_chunk$set(echo = TRUE,eval=TRUE)
anaemia <- read.csv("data/anaemia.csv",stringsAsFactors=TRUE)
hist(anaemia$hb_pre) # Look at the distributions - see below - near-enough Normal
## Calculate 95% confidence intervals
hb_pre_mean <- mean(anaemia$hb_pre) # Find mean of data
hb_pre_sd <- sd(anaemia$hb_pre) # Find standard deviation of data
hb_pre_n <- length(anaemia$hb_pre) # Find sample size
error <- qnorm(0.975)*hb_pre_sd/sqrt(hb_pre_n) # Calculate the Z-score for a 95% confidence interval
# Calculate lower and upper 95% confidence intervals
lower_conf <- hb_pre_mean - error
upper_conf <- hb_pre_mean + error
death_table <- table(anaemia$death) # View data
n_alive <- death_table[1]
n_died <- death_table[2]
n <- n_alive + n_died
prop.test(n_died, n, conf.level=0.95)
hist(anaemia$hb_pre) # Look at the distrution of per-operation haemoglobin levels
t.test(x=anaemia$hb_pre, mu=120) # Compare mean haemoglobin levels to fixed value of 120
hist(anaemia[anaemia$sex == "Female","hb_pre"]) # Look at the distrution of per-operation haemoglobin levels in women
t.test(x=anaemia[anaemia$sex == "Female","hb_pre"], mu=120) # Compare mean haemoglobin levels to fixed value of 120
female_hb_pre <- anaemia[anaemia$sex=="Female","hb_pre"]
male_hb_pre <- anaemia[anaemia$sex=="Male","hb_pre"]
hist(female_hb_pre)
hist(male_hb_pre)
t.test(x=female_hb_pre, y=male_hb_pre)
anaemia$hb_diff <- anaemia$hb_post - anaemia$hb_pre # Create a new variable for the change in hb levels for each individual
hist(anaemia$hb_diff)
t.test(anaemia$hb_pre, anaemia$hb_post) # Compare hb levels before and after operation
t.test(anaemia$hb_diff,mu=0) # Test if change in hb levels are significantly different to 0
table(anaemia$death)
table(anaemia[,c("death","anaemia")])
heaD(anaemia)
head(anaemia)
anaemia2 <- read.csv("data/anaemia_ch2.csv")
head(anaemia2)
table(anaemia2[,c("death","anaemia")])
count(anaemia[,c("death","anaemia")])
?prop.table
prop.table(anaemia2[,c("death","anaemia")])
?prob.table
table(anaemia2[,c("death","anaemia")])
death_anaemia_table <- table(anaemia2[,c("death","anaemia")])
prop.table(death_anaemia_table)
head(anaemia)
unique(anaemia2$anaemia)
length(unique(anaemia2$anaemia))
anaemia2 <- read.csv("data/anaemia_ch2.csv")
anaemia2 <- anaemia2[complete.cases(anaemia2),]
death_anaemia_table <- table(anaemia2[,c("death","anaemia")])
prop.table(death_anaemia_table)
levels(anaemia2$anaemia)
?read.csv
tail(anaemia2)
anaemia2 <- read.table("data/anaemia_ch2.csv")
anaemia2 <- read.table("data/anaemia_ch2.csv", sep=",")
tail(anaemia2)
anaemia2 <- read.table("data/anaemia_ch2.csv", sep=",", na.strings="NA")
tail(anaemia2)
anaemia2 <- read.csv("data/anaemia_ch2.csv")
anaemia2 <- anaemia2[complete.cases(anaemia2),]
death_anaemia_table <- table(anaemia2[,c("death","anaemia")])
prop.table(death_anaemia_table)
tail(anaemia2)
anaemia2 <- read.csv("data/anaemia_ch2.csv")
anaemia2 <- anaemia2[complete.cases(anaemia2),]
death_anaemia_table <- table(anaemia2[,c("death","anaemia")])
prop.table(death_anaemia_table)
tail(anaemia2)
anaemia2 <- read.csv("data/anaemia_ch2.csv")
tail(anaemia2)
levels(anaemia2$anaemia)
anaemia2 <- read.csv("data/anaemia_ch2.csv",stringsAsFactors=TRUE)
anaemia2 <- anaemia2[complete.cases(anaemia2),]
death_anaemia_table <- table(anaemia2[,c("death","anaemia")])
prop.table(death_anaemia_table)
tail(anaemia2)
death_anaemia_table
anaemia2 <- read.csv("data/anaemia_ch2.csv")
death_anaemia_table <- table(anaemia2[,c("death","anaemia")])
prop.table(death_anaemia_table)
death_anaemia_table
knitr::opts_chunk$set(echo = TRUE,eval=TRUE)
anaemia <- read.csv("data/anaemia_ch2.csv",stringsAsFactors=TRUE)
hist(anaemia$hb_pre) # Look at the distributions - see below - near-enough Normal
## Calculate 95% confidence intervals
hb_pre_mean <- mean(anaemia$hb_pre) # Find mean of data
hb_pre_sd <- sd(anaemia$hb_pre) # Find standard deviation of data
hb_pre_n <- length(anaemia$hb_pre) # Find sample size
error <- qnorm(0.975)*hb_pre_sd/sqrt(hb_pre_n) # Calculate the Z-score for a 95% confidence interval
# Calculate lower and upper 95% confidence intervals
lower_conf <- hb_pre_mean - error
upper_conf <- hb_pre_mean + error
death_table <- table(anaemia$death) # View data
n_alive <- death_table[1]
n_died <- death_table[2]
n <- n_alive + n_died
prop.test(n_died, n, conf.level=0.95)
hist(anaemia$hb_pre) # Look at the distrution of per-operation haemoglobin levels
t.test(x=anaemia$hb_pre, mu=120) # Compare mean haemoglobin levels to fixed value of 120
hist(anaemia[anaemia$sex == "Female","hb_pre"]) # Look at the distrution of per-operation haemoglobin levels in women
t.test(x=anaemia[anaemia$sex == "Female","hb_pre"], mu=120) # Compare mean haemoglobin levels to fixed value of 120
female_hb_pre <- anaemia[anaemia$sex=="Female","hb_pre"]
male_hb_pre <- anaemia[anaemia$sex=="Male","hb_pre"]
hist(female_hb_pre)
hist(male_hb_pre)
t.test(x=female_hb_pre, y=male_hb_pre)
anaemia$hb_diff <- anaemia$hb_post - anaemia$hb_pre # Create a new variable for the change in hb levels for each individual
hist(anaemia$hb_diff)
t.test(anaemia$hb_pre, anaemia$hb_post) # Compare hb levels before and after operation
t.test(anaemia$hb_diff,mu=0) # Test if change in hb levels are significantly different to 0
death_anaemia_table <- table(anaemia2[,c("death","anaemia")])
prop.table(death_anaemia_table)
knitr::opts_chunk$set(echo = TRUE,eval=TRUE)
anaemia <- read.csv("data/anaemia_ch2.csv",stringsAsFactors=TRUE, na.strings=c(""))
hist(anaemia$hb_pre) # Look at the distributions - see below - near-enough Normal
## Calculate 95% confidence intervals
hb_pre_mean <- mean(anaemia$hb_pre) # Find mean of data
hb_pre_sd <- sd(anaemia$hb_pre) # Find standard deviation of data
hb_pre_n <- length(anaemia$hb_pre) # Find sample size
error <- qnorm(0.975)*hb_pre_sd/sqrt(hb_pre_n) # Calculate the Z-score for a 95% confidence interval
# Calculate lower and upper 95% confidence intervals
lower_conf <- hb_pre_mean - error
upper_conf <- hb_pre_mean + error
death_table <- table(anaemia$death) # View data
n_alive <- death_table[1]
n_died <- death_table[2]
n <- n_alive + n_died
prop.test(n_died, n, conf.level=0.95)
hist(anaemia$hb_pre) # Look at the distrution of per-operation haemoglobin levels
t.test(x=anaemia$hb_pre, mu=120) # Compare mean haemoglobin levels to fixed value of 120
hist(anaemia[anaemia$sex == "Female","hb_pre"]) # Look at the distrution of per-operation haemoglobin levels in women
t.test(x=anaemia[anaemia$sex == "Female","hb_pre"], mu=120) # Compare mean haemoglobin levels to fixed value of 120
female_hb_pre <- anaemia[anaemia$sex=="Female","hb_pre"]
male_hb_pre <- anaemia[anaemia$sex=="Male","hb_pre"]
hist(female_hb_pre)
hist(male_hb_pre)
t.test(x=female_hb_pre, y=male_hb_pre)
anaemia$hb_diff <- anaemia$hb_post - anaemia$hb_pre # Create a new variable for the change in hb levels for each individual
hist(anaemia$hb_diff)
t.test(anaemia$hb_pre, anaemia$hb_post) # Compare hb levels before and after operation
t.test(anaemia$hb_diff,mu=0) # Test if change in hb levels are significantly different to 0
death_anaemia_table <- table(anaemia2[,c("death","anaemia")])
prop.table(death_anaemia_table)
anaemia <- read.csv("data/anaemia_ch2.csv",stringsAsFactors=TRUE, na.strings=c(""))
tail(anaemia)
death_anaemia_table <- table(anaemia2[complete.cases(anaemia2[,c("death","anaemia")]),c("death","anaemia")])
prop.table(death_anaemia_table)
death_anaeima_table
death_anaemia_table
complete.cases(anaemia2[,c("death","anaemia")])
anaemia2[complete.cases(anaemia2[,c("death","anaemia")]),c("death","anaemia")]
tmp <- anaemia2[complete.cases(anaemia2[,c("death","anaemia")]),c("death","anaemia")]
tail(tmp)
unique(tmp$anaemia)
length(unique(tmp$anaemia))
death_anaemia_table <- table(anaemia[complete.cases(anaemia[,c("death","anaemia")]),c("death","anaemia")])
prop.table(death_anaemia_table)
?table
anaemia_death_table <- table(anaemia[,c("death","anaemia")],exclude=TRUE)
anaemia_death_table
anaemia_death_table <- table(anaemia[,c("death","anaemia")],exclude=NA)
anaemia_death_table
?prop.table
?table
prop.table(death_anaemia_table,1)
chisq.test(anaemia_death_counts, correct=FALSE)
anaemia_death_counts <- table(anaemia[,c("death","anaemia")],exclude=NA)
prop.table(death_anaemia_table,1)
chisq.test(anaemia_death_counts, correct=FALSE)
?chisq.test
summary(chisq.test(anaemia_death_counts, correct=FALSE))
print(chisq.test(anaemia_death_counts, correct=FALSE))
res <- chisq.test(anaemia_death_counts, correct=FALSE))=
res <- chisq.test(anaemia_death_counts, correct=FALSE)
res
res$expected
res$p.value
res$statistic
print(res)
knitr::opts_chunk$set(echo = TRUE,eval=TRUE)
anaemia <- read.csv("data/anaemia_ch2.csv",stringsAsFactors=TRUE, na.strings=c(""))
anaemia <- read.csv("data/anaemia_ch2.csv",stringsAsFactors=TRUE, na.strings=c(""))
hist(anaemia$hb_pre) # Look at the distributions - see below - near-enough Normal
hb_pre_mean <- mean(anaemia$hb_pre) # Find mean of data
hb_pre_sd <- sd(anaemia$hb_pre) # Find standard deviation of data
hb_pre_n <- length(anaemia$hb_pre) # Find sample size
error <- qnorm(0.975)*hb_pre_sd/sqrt(hb_pre_n) # Calculate the Z-score for a 95% confidence interval
lower_conf <- hb_pre_mean - error
upper_conf <- hb_pre_mean + error
print(lower_conf)
print(upper_conf)
?hist
hb_pre_mean <- mean(anaemia$hb_pre,exclude=NA) # Find mean of data
hb_pre_mean
?mean
hb_pre_mean <- mean(anaemia$hb_pre,na.rm=TRUE) # Find mean of data
hb_pre_mean
?length
hb_pre_sd <- sd(anaemia$hb_pre,na.rm=TRUE) # Find standard deviation of data
hb_pre_n <- length(anaemia$hb_pre,na.rm=TRUE) # Find sample size
hb_pre_sd
hb_pre_n <- length(anaemia$hb_pre[complete.cases(anaemia$hb_pre)]) # Find sample size
hb_pre_n
hb_pre_mean <- mean(anaemia$hb_pre,na.rm=TRUE) # Find mean of data
hb_pre_sd <- sd(anaemia$hb_pre,na.rm=TRUE) # Find standard deviation of data
hb_pre_n <- length(anaemia$hb_pre[complete.cases(anaemia$hb_pre)]) # Find sample size
error <- qnorm(0.975)*hb_pre_sd/sqrt(hb_pre_n) # Calculate the Z-score for a 95% confidence interval
lower_conf <- hb_pre_mean - error
upper_conf <- hb_pre_mean + error
print(lower_conf)
print(upper_conf)
t.test(anaemia$hb_pre)
?t.test
t.test(anaemia$hb_pre,na.rm=TRUE)
t.test(anaemia$hb_pre[complete.cases(anaemia$hb_pre)])
t.test(anaemia$hb_pre)
print(lower_conf)
hb_pre_mean
hist(anaemia$hb_pre) # Look at the distributions - near-enough Normal
hb_pre_mean <- mean(anaemia$hb_pre,na.rm=TRUE) # Find mean of data
hb_pre_sd <- sd(anaemia$hb_pre,na.rm=TRUE) # Find standard deviation of data
hb_pre_n <- length(anaemia$hb_pre[complete.cases(anaemia$hb_pre)]) # Find sample size
summary(anaemia$hb_pre)
t.test(anaemia$hb_pre)
death_table <- table(anaemia$death) # View data
n_alive <- death_table[1]
n_died <- death_table[2]
n <- n_alive + n_died
prop.test(n_died, n, conf.level=0.95)
female_hb_pre <- anaemia[anaemia$sex=="Female","hb_pre"] # Extract hb data for females
male_hb_pre <- anaemia[anaemia$sex=="Male","hb_pre"] # Extract hb data for males
par(mfrow=c(2,1))
hist(female_hb_pre)
hist(male_hb_pre)
knitr::opts_chunk$set(echo = TRUE,eval=TRUE)
anaemia <- read.csv("data/anaemia_ch2.csv",stringsAsFactors=TRUE, na.strings=c(""))
hist(anaemia$hb_pre) # Look at the distributions - near-enough Normal
summary(anaemia$hb_pre) # Look at summary of data
t.test(anaemia$hb_pre) # Use t.test function to test if true mean is equal to 0
death_table <- table(anaemia$death) # View counted data
n_alive <- death_table[1] # Extract number alive
n_died <- death_table[2] # Extract number that died
n <- n_alive + n_died # Calculated total sample size
prop.test(n_died, n, conf.level=0.95) # Use prop.test function to generate 95% CI
hist(anaemia$hb_pre) # Look at the distrution of pre-operation haemoglobin levels
t.test(x=anaemia$hb_pre, mu=120) # Compare mean haemoglobin levels to fixed value of 120
hist(anaemia[anaemia$sex == "Female","hb_pre"]) # Look at the distrution of pre-operation haemoglobin levels in women
t.test(x=anaemia[anaemia$sex == "Female","hb_pre"], mu=120) # Compare mean haemoglobin levels to fixed value of 120
female_hb_pre <- anaemia[anaemia$sex=="Female","hb_pre"] # Extract hb data for females
male_hb_pre <- anaemia[anaemia$sex=="Male","hb_pre"] # Extract hb data for males
par(mfrow=c(2,1))
hist(female_hb_pre)
hist(male_hb_pre)
t.test(x=female_hb_pre, y=male_hb_pre)
?t.test
t.test(anaemia$hb_pre, anaemia$hb_post,paired=TRUE) # Paired t-test to compare hb levels before and after operation
anaemia_death_counts <- table(anaemia[,c("death","anaemia")],exclude=NA)
prop.table(anaemia_death_counts,1)
?prop.table
prop.table(anaemia_death_counts,2)
res <- chisq.test(anaemia_death_counts, correct=FALSE)
print(res) # Look at results
operat_death_counts <- table(anaemia[,c("death","operat")],exclude=NA)
chisq.test(operat_death_counts, correct=FALSE)
?chisq.test
res <- chisq.test(anaemia_death_counts, correct=FALSE)
chisq.test(anaemia_death_counts, correct=FALSE)
chisq.test(anaemia_death_counts, correct=FALSE)
chisq.test(anaemia_death_counts, correct=TRUE)
fisher.test(anaemia_death_counts)
chisq.test(anaemia_death_counts, correct=FALSE)
chisq.test(operat_death_counts, correct=FALSE)
chisq.test(operat_death_counts, correct=TRUE)
fisher.test(operat_death_counts)
fisher.test(anaemia_death_counts)
chisq.test(anaemia_death_counts, correct=FALSE)
chisq.test(operat_death_counts, correct=FALSE)
?table
operat_death_counts <- table(anaemia[,c("death","operat")],useNA=FALSE,exclude=3)
anaemic$operat
anaemia$operat
operat_death_counts <- table(anaemia[,c("death","operat")],useNA=FALSE)
chisq.test(operat_death_counts, correct=FALSE)
operat_death_counts <- table(anaemia[,c("death","operat")],useNA=FALSE,exclude="Salvage")
operat_death_counts <- table(anaemia[,c("death","operat")],useNA="no"",exclude="Salvage")
operat_death_counts <- table(anaemia[,c("death","operat")],useNA="no",exclude="Salvage")
res <- chisq.test(anaemia_death_counts,useNA="no")
anaemia_death_counts <- table(anaemia[,c("death","anaemia")],useNA="no")
res <- chisq.test(anaemia_death_counts,correct=FALSE)
operat_death_counts <- table(anaemia[,c("death","operat")],useNA="no")
chisq.test(operat_death_counts, correct=FALSE)
operat_death_counts <- table(anaemia[,c("death","operat")],useNA="no",exclude="Salvage")
chisq.test(operat_death_counts, correct=FALSE)
operat_death_counts
levels(anaemia$operat)
A<-andeath_counts[1,1]
A<-anaemia_death_counts[1,1]
B<-anaemia_death_counts[1,2]
C<-anaemia_death_counts[2,1]
D<-anaemia_death_counts[2,2]
(D/(C+D))/(B/(A+B))
library(epitoools)
library(epitools)
install.packages("epitools")
epitab(anaemia_death_counts, method="riskratio")
library(epitools)
epitab(anaemia_death_counts, method="riskratio")
epitab(table(anaemia[,c("death","operat")],useNA="no") , method="riskratio")
epitab(table(anaemia[,c("death","anaemia")],useNA="no") , method="riskratio")
epitab(table(anaemia[,c("anaemia","death")],useNA="no") , method="riskratio")
1/0.2677
?epitab
epitab(table(anaemia[,c("anaemia","death")],useNA="no") , method="riskratio",riskratio="wald")
epitab(table(anaemia[,c("anaemia","death")],useNA="no") , method="riskratio",p.value="chi2")
epitab(table(anaemia[,c("anaemia","death")],useNA="no") , method="riskratio",pvalue="chi2")
epitab(table(anaemia[,c("anaemia","death")],useNA="no") , method="riskratio",pvalue="chi2",rev="rows")
A<-anaemia_death_counts[1,1]
B<-anaemia_death_counts[1,2]
C<-anaemia_death_counts[2,1]
D<-anaemia_death_counts[2,2]
(D/(C+D))/(B/(A+B))
1/(D/(C+D))/(B/(A+B))
riskratio(anaemia_death_counts)
riskratio(anaemia_death_counts,rev="rows")
epitab(anaemia_death_counts, method="riskratio",pvalue="chi2",rev="rows")
anaemia_death_counts <- table(anaemia[,c("death","anaemia")],useNA="no")
epitab(anaemia_death_counts, method="riskratio",pvalue="chi2",rev="rows")
epitab(anaemia_death_counts, method="riskratio",pvalue="chi2",rev="both")
epitab(anaemia_death_counts, method="riskratio",pvalue="chi2",rev="columns")
epitab(anaemia_death_counts, method="riskratio",pvalue="chi2",rev="rows")
res <- chisq.test(anaemia_death_counts,correct=FALSE)
print(res) # Look at results
print(res$expected) # Look at expected values under the null hypothesis
prop.table(anaemia_death_counts,2)
print(res) # Look at results
knitr::opts_chunk$set(echo = TRUE,eval=TRUE)
anaemia <- read.csv("data/anaemia_ch2.csv",stringsAsFactors=TRUE, na.strings=c(""))
hist(anaemia$hb_pre) # Look at the distributions - near-enough Normal
summary(anaemia$hb_pre) # Look at summary of data
t.test(anaemia$hb_pre) # Use t.test function to test if true mean is equal to 0
death_table <- table(anaemia$death) # View counted data
n_alive <- death_table[1] # Extract number alive
n_died <- death_table[2] # Extract number that died
n <- n_alive + n_died # Calculated total sample size
prop.test(n_died, n, conf.level=0.95) # Use prop.test function to generate 95% CI
hist(anaemia$hb_pre) # Look at the distrution of pre-operation haemoglobin levels
t.test(x=anaemia$hb_pre, mu=120) # Compare mean haemoglobin levels to fixed value of 120
hist(anaemia[anaemia$sex == "Female","hb_pre"]) # Look at the distrution of pre-operation haemoglobin levels in women
t.test(x=anaemia[anaemia$sex == "Female","hb_pre"], mu=120) # Compare mean haemoglobin levels to fixed value of 120
female_hb_pre <- anaemia[anaemia$sex=="Female","hb_pre"] # Extract hb data for females
male_hb_pre <- anaemia[anaemia$sex=="Male","hb_pre"] # Extract hb data for males
# View data. Note xlim argument to ensure that
# axes are aligned
par(mfrow=c(2,1))
hist(female_hb_pre, xlim=c(70,200))
hist(male_hb_pre,xlim=c(70,200))
# Test if pre operation hb levels are significantly different between men and women
t.test(x=female_hb_pre, y=male_hb_pre, var.equal=TRUE)
anaemia$hb_diff <- anaemia$hb_post - anaemia$hb_pre # Create a new variable for the change in hb levels for each individual
hist(anaemia$hb_diff) # Assess distribution of changes, which is approx. Normal
t.test(anaemia$hb_pre, anaemia$hb_post,paired=TRUE, var.equal=TRUE) # Paired t-test to compare hb levels before and after operation
t.test(anaemia$hb_diff,mu=0) # One-sample t test if change in hb levels are significantly different to 0
# Generate table of counts for these two variables, excluding NA data
anaemia_death_counts <- table(anaemia[,c("death","anaemia")],useNA="no")
# Use this table and the prop.table function to look at proportions,
# normalised by column
prop.table(anaemia_death_counts,2)
# perform chi-squared test of association between being anaemia pre-op & death
res <- chisq.test(anaemia_death_counts,correct=FALSE)
print(res) # Look at results
print(res$expected) # Look at expected values under the null hypothesis
# Generate table of counts for these two variables
operat_death_counts <- table(anaemia[,c("death","operat")],useNA="no")
chisq.test(operat_death_counts, correct=FALSE)
# Generate table of counts for these two variables,
# but exclude the "Salvage" operation type
operat_death_counts <- table(anaemia[,c("death","operat")],useNA="no",exclude="Salvage")
chisq.test(operat_death_counts, correct=FALSE) # chi-squared test as above, but excluding salvage category
install.packages("epitools") # Install the epitools package
library(epitools) # Load the epitools package
# Need to specify that we are calculating a riskratio, and wish
# to use the Chi-squared calculated p-value.
# the ordering of the rows has been reversed to estimate the
# increased risk with anaemia relative to no anaemia
epitab(anaemia_death_counts, method="riskratio",pvalue="chi2",rev="rows")
install.packages("epitools")
knitr::opts_chunk$set(echo = TRUE,eval=TRUE)
if(!require("epitool")) install.packages("epitools") # Install the epitools package
if(!require("epitools")) install.packages("epitools") # Install the epitools package
knitr::opts_chunk$set(echo = TRUE,eval=TRUE)
anaemia <- read.csv("data/anaemia_ch2.csv",stringsAsFactors=TRUE, na.strings=c(""))
hist(anaemia$hb_pre) # Look at the distributions - near-enough Normal
summary(anaemia$hb_pre) # Look at summary of data
t.test(anaemia$hb_pre) # Use t.test function to test if true mean is equal to 0
death_table <- table(anaemia$death) # View counted data
n_alive <- death_table[1] # Extract number alive
n_died <- death_table[2] # Extract number that died
n <- n_alive + n_died # Calculated total sample size
prop.test(n_died, n, conf.level=0.95) # Use prop.test function to generate 95% CI
hist(anaemia$hb_pre) # Look at the distrution of pre-operation haemoglobin levels
t.test(x=anaemia$hb_pre, mu=120) # Compare mean haemoglobin levels to fixed value of 120
hist(anaemia[anaemia$sex == "Female","hb_pre"]) # Look at the distrution of pre-operation haemoglobin levels in women
t.test(x=anaemia[anaemia$sex == "Female","hb_pre"], mu=120) # Compare mean haemoglobin levels to fixed value of 120
female_hb_pre <- anaemia[anaemia$sex=="Female","hb_pre"] # Extract hb data for females
male_hb_pre <- anaemia[anaemia$sex=="Male","hb_pre"] # Extract hb data for males
# View data. Note xlim argument to ensure that
# axes are aligned
par(mfrow=c(2,1))
hist(female_hb_pre, xlim=c(70,200))
hist(male_hb_pre,xlim=c(70,200))
# Test if pre operation hb levels are significantly different between men and women
t.test(x=female_hb_pre, y=male_hb_pre, var.equal=TRUE)
anaemia$hb_diff <- anaemia$hb_post - anaemia$hb_pre # Create a new variable for the change in hb levels for each individual
hist(anaemia$hb_diff) # Assess distribution of changes, which is approx. Normal
t.test(anaemia$hb_pre, anaemia$hb_post,paired=TRUE, var.equal=TRUE) # Paired t-test to compare hb levels before and after operation
t.test(anaemia$hb_diff,mu=0) # One-sample t test if change in hb levels are significantly different to 0
# Generate table of counts for these two variables, excluding NA data
anaemia_death_counts <- table(anaemia[,c("death","anaemia")],useNA="no")
# Use this table and the prop.table function to look at proportions,
# normalised by column
prop.table(anaemia_death_counts,2)
# perform chi-squared test of association between being anaemia pre-op & death
res <- chisq.test(anaemia_death_counts,correct=FALSE)
print(res) # Look at results
print(res$expected) # Look at expected values under the null hypothesis
# Generate table of counts for these two variables
operat_death_counts <- table(anaemia[,c("death","operat")],useNA="no")
chisq.test(operat_death_counts, correct=FALSE)
# Generate table of counts for these two variables,
# but exclude the "Salvage" operation type
operat_death_counts <- table(anaemia[,c("death","operat")],useNA="no",exclude="Salvage")
chisq.test(operat_death_counts, correct=FALSE) # chi-squared test as above, but excluding salvage category
if(!require("epitools")) install.packages("epitools") # Install the epitools package
library(epitools) # Load the epitools package
# Need to specify that we are calculating a riskratio, and wish
# to use the Chi-squared calculated p-value.
# the ordering of the rows has been reversed to estimate the
# increased risk with anaemia relative to no anaemia
epitab(anaemia_death_counts, method="riskratio",pvalue="chi2",rev="rows")
epitab(anaemia_death_counts, method="riskratio",pvalue="chi2",rev="rows")
epitab(anaemia_death_counts, method="riskratio",pvalue="chi2",rev="cols")
epitab(anaemia_death_counts, method="riskratio",pvalue="chi2",rev="columns")
epitab(anaemia_death_counts, method="riskratio",pvalue="chi2",rev="rows")
?epitab
epitab(anaemia_death_counts, method="oddsratio",pvalue="chi2",rev="rows")
epitab(anaemia_death_counts, method="riskratio",pvalue="chi2",rev="rows")
epitab(anaemia_death_counts, method="riskratio",pvalue="chi2",rev="rows",riskratio="boot")
epitab(anaemia_death_counts, method="riskratio",pvalue="chi2",rev="rows")
epitab(anaemia_death_counts, method="oddsratio",pvalue="chi2",rev="rows")
hist(anaemia$hb_pre, main="Pre-operation haemoglobin levels") # Look at the distributions - near-enough Normal
summary(anaemia$hb_pre) # Look at summary of data
death_table <- table(anaemia$death) # View counts of data in each category
print(death_table)
n_alive <- death_table[1] # Extract number alive
n_died <- death_table[2] # Extract number that died
n <- n_alive + n_died # Calculate total sample size
prop.test(n_died, n, conf.level=0.95) # Use prop.test function to generate 95% CI
hist(anaemia$hb_pre, main="Pre-operation haemoglobin levels") # Look at the distrution of pre-operation haemoglobin levels
hist(anaemia[anaemia$sex == "Female","hb_pre"], main="Pre-operation haemoglobin levels in women") # Look at the distrution of pre-operation haemoglobin levels in women
t.test(x=anaemia[anaemia$sex == "Female","hb_pre"], mu=120) # Compare mean haemoglobin levels to fixed value of 120
hist(female_hb_pre, xlim=c(70,200), main="Pre-operation haemoglobin levels in women")
hist(male_hb_pre,xlim=c(70,200), main="Pre-operation haemoglobin levels in men")
female_hb_pre <- anaemia[anaemia$sex=="Female","hb_pre"] # Extract hb data for females
male_hb_pre <- anaemia[anaemia$sex=="Male","hb_pre"] # Extract hb data for males
par(mfrow=c(2,1))
hist(female_hb_pre, xlim=c(70,200), main="Pre-operation haemoglobin levels in women")
hist(male_hb_pre,xlim=c(70,200), main="Pre-operation haemoglobin levels in men")
t.test(x=female_hb_pre, y=male_hb_pre, var.equal=TRUE)
hist(anaemia$hb_diff, main="Change in haemoglobin levels pre to post operation") # Assess distribution of changes, which is approx. Normal
t.test(anaemia$hb_pre, anaemia$hb_post,paired=TRUE, var.equal=TRUE) # Paired t-test to compare hb levels before and after operation
?prop.table
anaemia_death_counts
epitab(anaemia_death_counts,method="riskratio")
epitab(t(anaemia_death_counts),method="riskratio")
epitab(t(anaemia_death_counts),method="riskratio",rev="rows")
anaemia_death_counts_epitab <- table(anaemia[,c("anaemia","death")],useNA="no")
epitab(anaemia_death_counts_epitab, method="riskratio",pvalue="chi2",rev="rows")
anaemia_death_counts_epitab
?epitab
anaemia_death_counts_epitab <- table(anaemia[,c("anaemia","death")],useNA="no")
epitab(anaemia_death_counts_epitab, method="riskratio",pvalue="chi2",rev="rows")
epitab(anaemia_death_counts_epitab, method="oddsratio",pvalue="chi2",rev="rows")
Rcpp::sourceCpp('tmp.cpp')
Rcpp::sourceCpp('tmp.cpp')
Rcpp::sourceCpp('tmp.cpp')
Rcpp::sourceCpp('tmp.cpp')
Rcpp::sourceCpp('tmp.cpp')
Rcpp::sourceCpp('tmp.cpp')
source('~/Documents/Fluscape/serosolver/testing/test_run.R', echo=TRUE)
ps[[1]]
plot(as.mcmc(chain))
AR_p
buckets
parTab$values
inf_chain_p
plot(as.mcmc(chain))
create_age_mask(ages,strainIsolationTimes,n_indiv)
create_post_func()
create_post_func

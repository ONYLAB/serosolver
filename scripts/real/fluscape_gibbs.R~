library(ggplot2)
library(coda)
library(plyr)
library(reshape2)
library(data.table)

## Set working directory and load code
setwd("~/Documents/Fluscape/serosolver")
devtools::load_all()

## How many individuals to simulate?
n_indiv <-100
buckets <- 1
## The general output filename
filename <- "testing/fluscape_1000_test"

parTab <- read.csv("~/Documents/Fluscape/serosolver/inputs/parTab_phi.csv",stringsAsFactors=FALSE)
parTab <- parTab[parTab$names != "phi",]
parTab[parTab$names == "wane","values"] <- 1/buckets
parTab[parTab$names %in% c("alpha","beta"),"values"] <- c(1,1)

antigenicMap <- read.csv("~/Documents/Fluscape/fluscape/trunk/data/Fonville2014AxMapPositionsApprox.csv",stringsAsFactors=FALSE)
fit_dat <- generate_antigenic_map(antigenicMap, buckets)
fluscapeDat <- read.csv("data/real/fluscape_data.csv",stringsAsFactors=FALSE)
fluscapeAges <- read.csv("data/real/fluscape_ages.csv")
## Remove individuals with NA for DOB
na_indiv <- fluscapeAges[which(is.na(fluscapeAges$DOB)),"individual"]
fluscapeDat <- fluscapeDat[-na_indiv,]
fluscapeAges <- fluscapeAges[-na_indiv,]
## Take random subset of individuals
#indivs <- sample(unique(fluscapeDat$individual),n_indiv)
#indivs <- indivs[order(indivs)]
indivs <- unique(fluscapeAges$individual)
titreDat <- fluscapeDat[fluscapeDat$individual %in% indivs,]
ages <- fluscapeAges[fluscapeAges$individual %in% indivs,]
titreDat$individual <- match(titreDat$individual, indivs)
ages$individual <- match(ages$individual, indivs)
titreDat <- titreDat[,c("individual", "samples", "virus", "titre", "run", "group")]

titreDat <- titreDat[titreDat$run == 1,]
samplingTimes <- unique(titreDat$samples)
n_indiv <- length(unique(titreDat$individual))    
fit_dat <- generate_antigenic_map(antigenicMap, buckets)
virus_key <- c("HK68"=1968, "EN72"=1972, "VI75"=1975, "TX77"=1977, "BK79"=1979, "SI87"=1987, "BE89"=1989, "BJ89"=1989,"BE92"=1992, "WU95"=1995, "SY97"=1997, "FU02"=2002, "CA04"=2004, "WI05"=2005, "PE06"=2006)*buckets
fit_dat <- fit_dat[fit_dat$inf_years >= 1968*buckets & fit_dat$inf_years <= max(samplingTimes),]
strainIsolationTimes <- unique(fit_dat$inf_years)
startInf <- setup_infection_histories_new(titreDat, ages, strainIsolationTimes, space=5,titre_cutoff=2)
infectionHistories <- startInf

ageMask <- create_age_mask(ages, strainIsolationTimes,n_indiv)

startTab <- parTab
for(i in 1:nrow(startTab)){
  if(startTab[i,"fixed"] == 0){
    startTab[i,"values"] <- runif(1,startTab[i,"lower_start"], 
                                  startTab[i,"upper_start"])
  }
}

mcmcPars <- c("iterations"=1000000,"popt"=0.44,"popt_hist"=0.44,"opt_freq"=2000,"thin"=100,"adaptive_period"=200000,
              "save_block"=1000,"thin2"=1000,"histSampleProb"=0.5,"switch_sample"=2, "burnin"=0, 
              "nInfs"=floor(ncol(startInf)/4), "moveSize"=3*buckets, "histProposal"=6, "histOpt"=0,"n_par"=10, "swapPropn"=0.5)

res <- run_MCMC(startTab, titreDat, mcmcPars, filename=filename,
                create_post_func, NULL,NULL,version=1, 0.2, 
                fit_dat, ages=ages, 
                startInfHist=startInf,n_alive=NULL)
beepr::beep(4)

chain <- read.csv(res$chain_file)
chain <- chain[chain$sampno >= (mcmcPars["adaptive_period"]+mcmcPars["burnin"]),]

infChain <- data.table::fread(res$history_file)
infChain <- infChain[infChain$sampno >= (mcmcPars["adaptive_period"]+mcmcPars["burnin"]),]
n_alive <- sapply(strainIsolationTimes, function(x) length(ages[ages$DOB <= x,]))
inf_prop <- colSums(startInf)/n_alive
inf_prop <- data.frame(AR=inf_prop,year=strainIsolationTimes)
AR_p <- plot_attack_rates(infChain, titreDat, ages, seq(yearMin, yearMax, by=1),n_alive=NULL) + 
 scale_y_continuous(expand=c(0,0),limits=c(0,1))

indivs <- sample(n_indiv, 10)
sampd <- sample(n_indiv,20)
infChain <- data.table::fread(res$history_file)
infChain <- infChain[infChain$sampno >= (mcmcPars["adaptive_period"]+mcmcPars["burnin"]),]
n_strain <- max(infChain$j)
data.table::setkey(infChain, "j","sampno")
n_inf_chain <- infChain[,list(V1=sum(x)),by=key(infChain)]

inf_chain_p <- ggplot(n_inf_chain) + geom_line(aes(x=sampno,y=V1)) + facet_wrap(~j)

plot_infection_histories(chain, infChain, titreDat, sample(1:n_indiv, 10), fit_dat, ages,parTab,100)


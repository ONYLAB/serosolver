coin_probs <- runif(n,0,0.2)
indivs <- 50
samps <- seq(1,n, by=1)
pars <- c(4, 0.3, 1)
fixed <- c(0,0,0)
fixed_probs <- rep(0,n)
#fixed_probs[1:2] <- 0
covMat_theta <- diag(length(fixed[which(fixed==0)]))
covMat_probs <- diag(length(fixed_probs[which(fixed_probs==0)]))
iter <- 50000
## Setup parameter names and simulated data
parNames <- c("boost","sigma","error")
coin_results <- sapply(coin_probs, function(x) sample(c(0,1),indivs,prob=c(1-x,x),replace=TRUE))
data_suggested_coins <- colSums(coin_results)/nrow(coin_results)
dat <- coin_toss_group(pars, coin_results)
dat <- measurement_error_group(pars,dat)
print(paste0("Coin probs: ", paste0(signif(coin_probs,3),collapse=" ")))
print(paste0("Data suggest coin values: ", paste0(data_suggested_coins,collapse=" ")))
startPars <- pars
startPars[1] <- runif(1,0,10)
startPars[2] <- runif(1,0,1)
startPars[3] <- runif(1,0,5)
startPars[which(fixed == 1)] <- pars[which(fixed == 1)]
startProbs <- runif(n,0,1)
startProbs[which(fixed_probs == 1)] <- coin_probs[which(fixed_probs == 1)]
start_coins <- matrix(sample(c(0,1),n*indivs,replace=TRUE,prob = c(0.99,0.01)),nrow=indivs)
res <- run_MCMC_group(startPars, startProbs, fixed, fixed_probs, start_coins,dat,samps, iter,
covMat_theta, covMat_probs, thin=100,0.01,0.001,500,1,printF=1000,temp=1)
chain <- res[[2]]
tmp <- res[[3]]
colnames(chain) <- c("sampno","mu","cr","sd",paste0("prob.",1:n))
y <- extract_number_infections_from_chain(tmp, n, TRUE)
y1 <- extract_number_infections_from_chain(tmp, n, FALSE)
chain <- merge(chain,y, by="sampno")
chain <- merge(chain,y1,by="sampno")
plot(coda::as.mcmc(chain))
ess1
library(reshape2)
library(plyr)
library(ggplot2)
library(foreach)
library(doMC)
registerDoMC(5)  #change the 2 to your number of CPU cores
getDoParWorkers()
setwd("~/Documents/Fluscape/serosolver/scripts/testing/coin_toss")
source("model_funcs.R")
source("probability_funcs.R")
source("proposal_funcs.R")
source("mcmc_funcs.R")
source("mcmc_funcs_marginal.R")
## Input parameters
n <- 10
coin_probs <- runif(n,0,0.2)
indivs <- 50
samps <- seq(1,n, by=1)
pars <- c(4, 0.3, 1)
fixed <- c(0,0,0)
fixed_probs <- rep(0,n)
#fixed_probs[1:2] <- 0
covMat_theta <- diag(length(fixed[which(fixed==0)]))
covMat_probs <- diag(length(fixed_probs[which(fixed_probs==0)]))
iter <- 50000
## Setup parameter names and simulated data
parNames <- c("boost","sigma","error")
coin_results <- sapply(coin_probs, function(x) sample(c(0,1),indivs,prob=c(1-x,x),replace=TRUE))
data_suggested_coins <- colSums(coin_results)/nrow(coin_results)
dat <- coin_toss_group(pars, coin_results)
dat <- measurement_error_group(pars,dat)
print(paste0("Coin probs: ", paste0(signif(coin_probs,3),collapse=" ")))
print(paste0("Data suggest coin values: ", paste0(data_suggested_coins,collapse=" ")))
startPars <- pars
startPars[1] <- runif(1,0,10)
startPars[2] <- runif(1,0,1)
startPars[3] <- runif(1,0,5)
startPars[which(fixed == 1)] <- pars[which(fixed == 1)]
startProbs <- runif(n,0,1)
startProbs[which(fixed_probs == 1)] <- coin_probs[which(fixed_probs == 1)]
start_coins <- matrix(sample(c(0,1),n*indivs,replace=TRUE,prob = c(0.99,0.01)),nrow=indivs)
res <- run_MCMC_group(startPars, startProbs, fixed, fixed_probs, start_coins,dat,samps, iter,
covMat_theta, covMat_probs, thin=100,0.01,0.001,500,1,printF=1000,temp=1)
res <- run_MCMC_group(startPars, startProbs, fixed, fixed_probs, start_coins,dat,samps, iter,
covMat_theta, covMat_probs, thin=100,0.01,0.001,500,10000,printF=1000,temp=1)
library(reshape2)
library(plyr)
library(ggplot2)
library(foreach)
library(doMC)
registerDoMC(5)  #change the 2 to your number of CPU cores
getDoParWorkers()
setwd("~/Documents/Fluscape/serosolver/scripts/testing/coin_toss")
source("model_funcs.R")
source("probability_funcs.R")
source("proposal_funcs.R")
source("mcmc_funcs.R")
source("mcmc_funcs_marginal.R")
## Input parameters
n <- 10
coin_probs <- runif(n,0,0.2)
indivs <- 50
samps <- seq(1,n, by=1)
pars <- c(4, 0.3, 1)
fixed <- c(0,0,0)
fixed_probs <- rep(0,n)
#fixed_probs[1:2] <- 0
covMat_theta <- diag(length(fixed[which(fixed==0)]))
covMat_probs <- diag(length(fixed_probs[which(fixed_probs==0)]))
iter <- 50000
## Setup parameter names and simulated data
parNames <- c("boost","sigma","error")
coin_results <- sapply(coin_probs, function(x) sample(c(0,1),indivs,prob=c(1-x,x),replace=TRUE))
data_suggested_coins <- colSums(coin_results)/nrow(coin_results)
dat <- coin_toss_group(pars, coin_results)
dat <- measurement_error_group(pars,dat)
print(paste0("Coin probs: ", paste0(signif(coin_probs,3),collapse=" ")))
print(paste0("Data suggest coin values: ", paste0(data_suggested_coins,collapse=" ")))
startPars <- pars
startPars[1] <- runif(1,0,10)
startPars[2] <- runif(1,0,1)
startPars[3] <- runif(1,0,5)
startPars[which(fixed == 1)] <- pars[which(fixed == 1)]
startProbs <- runif(n,0,1)
startProbs[which(fixed_probs == 1)] <- coin_probs[which(fixed_probs == 1)]
start_coins <- matrix(sample(c(0,1),n*indivs,replace=TRUE,prob = c(0.99,0.01)),nrow=indivs)
res <- run_MCMC_group(startPars, startProbs, fixed, fixed_probs, start_coins,dat,samps, iter,
covMat_theta, covMat_probs, thin=100,0.01,0.001,500,10000,printF=1000,temp=1)
res <- run_MCMC_group(startPars, startProbs, fixed, fixed_probs, start_coins,dat,samps, iter,
covMat_theta, covMat_probs, thin=100,0.01,0.001,500,20000,printF=1000,temp=1)
library(reshape2)
library(plyr)
library(ggplot2)
library(foreach)
library(doMC)
registerDoMC(5)  #change the 2 to your number of CPU cores
getDoParWorkers()
setwd("~/Documents/Fluscape/serosolver/scripts/testing/coin_toss")
source("model_funcs.R")
source("probability_funcs.R")
source("proposal_funcs.R")
source("mcmc_funcs.R")
source("mcmc_funcs_marginal.R")
## Input parameters
n <- 10
coin_probs <- runif(n,0,0.2)
indivs <- 50
samps <- seq(1,n, by=1)
pars <- c(4, 0.3, 1)
fixed <- c(0,0,0)
fixed_probs <- rep(0,n)
#fixed_probs[1:2] <- 0
covMat_theta <- diag(length(fixed[which(fixed==0)]))
covMat_probs <- diag(length(fixed_probs[which(fixed_probs==0)]))
iter <- 50000
## Setup parameter names and simulated data
parNames <- c("boost","sigma","error")
coin_results <- sapply(coin_probs, function(x) sample(c(0,1),indivs,prob=c(1-x,x),replace=TRUE))
data_suggested_coins <- colSums(coin_results)/nrow(coin_results)
dat <- coin_toss_group(pars, coin_results)
dat <- measurement_error_group(pars,dat)
print(paste0("Coin probs: ", paste0(signif(coin_probs,3),collapse=" ")))
print(paste0("Data suggest coin values: ", paste0(data_suggested_coins,collapse=" ")))
startPars <- pars
startPars[1] <- runif(1,0,10)
startPars[2] <- runif(1,0,1)
startPars[3] <- runif(1,0,5)
startPars[which(fixed == 1)] <- pars[which(fixed == 1)]
startProbs <- runif(n,0,1)
startProbs[which(fixed_probs == 1)] <- coin_probs[which(fixed_probs == 1)]
start_coins <- matrix(sample(c(0,1),n*indivs,replace=TRUE,prob = c(0.99,0.01)),nrow=indivs)
res <- run_MCMC_group(startPars, startProbs, fixed, fixed_probs, start_coins,dat,samps, iter,
covMat_theta, covMat_probs, thin=100,0.01,0.001,500,20000,printF=1000,temp=1)
library(reshape2)
library(plyr)
library(ggplot2)
library(foreach)
library(doMC)
registerDoMC(5)  #change the 2 to your number of CPU cores
getDoParWorkers()
setwd("~/Documents/Fluscape/serosolver/scripts/testing/coin_toss")
source("model_funcs.R")
source("probability_funcs.R")
source("proposal_funcs.R")
source("mcmc_funcs.R")
source("mcmc_funcs_marginal.R")
## Input parameters
n <- 10
coin_probs <- runif(n,0,0.2)
indivs <- 50
samps <- seq(1,n, by=1)
pars <- c(4, 0.3, 1)
fixed <- c(0,0,0)
fixed_probs <- rep(0,n)
#fixed_probs[1:2] <- 0
covMat_theta <- diag(length(fixed[which(fixed==0)]))
covMat_probs <- diag(length(fixed_probs[which(fixed_probs==0)]))
iter <- 50000
## Setup parameter names and simulated data
parNames <- c("boost","sigma","error")
coin_results <- sapply(coin_probs, function(x) sample(c(0,1),indivs,prob=c(1-x,x),replace=TRUE))
data_suggested_coins <- colSums(coin_results)/nrow(coin_results)
dat <- coin_toss_group(pars, coin_results)
dat <- measurement_error_group(pars,dat)
print(paste0("Coin probs: ", paste0(signif(coin_probs,3),collapse=" ")))
print(paste0("Data suggest coin values: ", paste0(data_suggested_coins,collapse=" ")))
startPars <- pars
startPars[1] <- runif(1,0,10)
startPars[2] <- runif(1,0,1)
startPars[3] <- runif(1,0,5)
startPars[which(fixed == 1)] <- pars[which(fixed == 1)]
startProbs <- runif(n,0,1)
startProbs[which(fixed_probs == 1)] <- coin_probs[which(fixed_probs == 1)]
start_coins <- matrix(sample(c(0,1),n*indivs,replace=TRUE,prob = c(0.99,0.01)),nrow=indivs)
res <- run_MCMC_group(startPars, startProbs, fixed, fixed_probs, start_coins,dat,samps, iter,
covMat_theta, covMat_probs, thin=100,0.01,0.001,500,20000,printF=1000,temp=1)
print(pcur_prob)
library(reshape2)
library(plyr)
library(ggplot2)
library(foreach)
library(doMC)
registerDoMC(5)  #change the 2 to your number of CPU cores
getDoParWorkers()
setwd("~/Documents/Fluscape/serosolver/scripts/testing/coin_toss")
source("model_funcs.R")
source("probability_funcs.R")
source("proposal_funcs.R")
source("mcmc_funcs.R")
source("mcmc_funcs_marginal.R")
## Input parameters
n <- 10
coin_probs <- runif(n,0,0.2)
indivs <- 50
samps <- seq(1,n, by=1)
pars <- c(4, 0.3, 1)
fixed <- c(0,0,0)
fixed_probs <- rep(0,n)
#fixed_probs[1:2] <- 0
covMat_theta <- diag(length(fixed[which(fixed==0)]))
covMat_probs <- diag(length(fixed_probs[which(fixed_probs==0)]))
iter <- 50000
## Setup parameter names and simulated data
parNames <- c("boost","sigma","error")
coin_results <- sapply(coin_probs, function(x) sample(c(0,1),indivs,prob=c(1-x,x),replace=TRUE))
data_suggested_coins <- colSums(coin_results)/nrow(coin_results)
dat <- coin_toss_group(pars, coin_results)
dat <- measurement_error_group(pars,dat)
print(paste0("Coin probs: ", paste0(signif(coin_probs,3),collapse=" ")))
print(paste0("Data suggest coin values: ", paste0(data_suggested_coins,collapse=" ")))
startPars <- pars
startPars[1] <- runif(1,0,10)
startPars[2] <- runif(1,0,1)
startPars[3] <- runif(1,0,5)
startPars[which(fixed == 1)] <- pars[which(fixed == 1)]
startProbs <- runif(n,0,1)
startProbs[which(fixed_probs == 1)] <- coin_probs[which(fixed_probs == 1)]
start_coins <- matrix(sample(c(0,1),n*indivs,replace=TRUE,prob = c(0.99,0.01)),nrow=indivs)
res <- run_MCMC_group(startPars, startProbs, fixed, fixed_probs, start_coins,dat,samps, iter,
covMat_theta, covMat_probs, thin=100,0.01,0.001,500,20000,printF=1000,temp=1)
library(reshape2)
library(plyr)
library(ggplot2)
library(foreach)
library(doMC)
registerDoMC(5)  #change the 2 to your number of CPU cores
getDoParWorkers()
setwd("~/Documents/Fluscape/serosolver/scripts/testing/coin_toss")
source("model_funcs.R")
source("probability_funcs.R")
source("proposal_funcs.R")
source("mcmc_funcs.R")
source("mcmc_funcs_marginal.R")
## Input parameters
n <- 10
coin_probs <- runif(n,0,0.2)
indivs <- 50
samps <- seq(1,n, by=1)
pars <- c(4, 0.3, 1)
fixed <- c(0,0,0)
fixed_probs <- rep(0,n)
#fixed_probs[1:2] <- 0
covMat_theta <- diag(length(fixed[which(fixed==0)]))
covMat_probs <- diag(length(fixed_probs[which(fixed_probs==0)]))
iter <- 50000
## Setup parameter names and simulated data
parNames <- c("boost","sigma","error")
coin_results <- sapply(coin_probs, function(x) sample(c(0,1),indivs,prob=c(1-x,x),replace=TRUE))
data_suggested_coins <- colSums(coin_results)/nrow(coin_results)
dat <- coin_toss_group(pars, coin_results)
dat <- measurement_error_group(pars,dat)
print(paste0("Coin probs: ", paste0(signif(coin_probs,3),collapse=" ")))
print(paste0("Data suggest coin values: ", paste0(data_suggested_coins,collapse=" ")))
startPars <- pars
startPars[1] <- runif(1,0,10)
startPars[2] <- runif(1,0,1)
startPars[3] <- runif(1,0,5)
startPars[which(fixed == 1)] <- pars[which(fixed == 1)]
startProbs <- runif(n,0,1)
startProbs[which(fixed_probs == 1)] <- coin_probs[which(fixed_probs == 1)]
start_coins <- matrix(sample(c(0,1),n*indivs,replace=TRUE,prob = c(0.99,0.01)),nrow=indivs)
res <- run_MCMC_group(startPars, startProbs, fixed, fixed_probs, start_coins,dat,samps, iter,
covMat_theta, covMat_probs, thin=100,0.01,0.001,500,20000,printF=1000,temp=1)
source('~/Documents/Fluscape/serosolver/scripts/testing/coin_toss/mcmc_funcs.R', echo=TRUE)
source('~/Documents/Fluscape/serosolver/scripts/testing/coin_toss/mcmc_funcs.R', echo=TRUE)
library(reshape2)
library(plyr)
library(ggplot2)
library(foreach)
library(doMC)
registerDoMC(5)  #change the 2 to your number of CPU cores
getDoParWorkers()
setwd("~/Documents/Fluscape/serosolver/scripts/testing/coin_toss")
source("model_funcs.R")
source("probability_funcs.R")
source("proposal_funcs.R")
source("mcmc_funcs.R")
source("mcmc_funcs_marginal.R")
## Input parameters
n <- 10
coin_probs <- runif(n,0,0.2)
indivs <- 50
samps <- seq(1,n, by=1)
pars <- c(4, 0.3, 1)
fixed <- c(0,0,0)
fixed_probs <- rep(0,n)
#fixed_probs[1:2] <- 0
covMat_theta <- diag(length(fixed[which(fixed==0)]))
covMat_probs <- diag(length(fixed_probs[which(fixed_probs==0)]))
iter <- 50000
## Setup parameter names and simulated data
parNames <- c("boost","sigma","error")
coin_results <- sapply(coin_probs, function(x) sample(c(0,1),indivs,prob=c(1-x,x),replace=TRUE))
data_suggested_coins <- colSums(coin_results)/nrow(coin_results)
dat <- coin_toss_group(pars, coin_results)
dat <- measurement_error_group(pars,dat)
print(paste0("Coin probs: ", paste0(signif(coin_probs,3),collapse=" ")))
print(paste0("Data suggest coin values: ", paste0(data_suggested_coins,collapse=" ")))
startPars <- pars
startPars[1] <- runif(1,0,10)
startPars[2] <- runif(1,0,1)
startPars[3] <- runif(1,0,5)
startPars[which(fixed == 1)] <- pars[which(fixed == 1)]
startProbs <- runif(n,0,1)
startProbs[which(fixed_probs == 1)] <- coin_probs[which(fixed_probs == 1)]
start_coins <- matrix(sample(c(0,1),n*indivs,replace=TRUE,prob = c(0.99,0.01)),nrow=indivs)
res <- run_MCMC_group(startPars, startProbs, fixed, fixed_probs, start_coins,dat,samps, iter,
covMat_theta, covMat_probs, thin=100,0.01,0.001,500,20000,printF=1000,temp=1)
chain <- res[[2]]
tmp <- res[[3]]
colnames(chain) <- c("sampno","mu","cr","sd",paste0("prob.",1:n))
y <- extract_number_infections_from_chain(tmp, n, TRUE)
y1 <- extract_number_infections_from_chain(tmp, n, FALSE)
chain <- merge(chain,y, by="sampno")
chain <- merge(chain,y1,by="sampno")
plot(coda::as.mcmc(chain))
plot(coda::as.mcmc(chain[floor(0.1*nrow(chain)):nrow(chain),]))
plot(coda::as.mcmc(chain[floor(0.1*nrow(chain)):nrow(chain),]))
plot(coda::as.mcmc(chain[floor(0.4*nrow(chain)):nrow(chain),]))
res <- run_MCMC_group(startPars, startProbs, fixed, fixed_probs, start_coins,dat,samps, iter,
covMat_theta, covMat_probs, thin=100,0.01,0.001,500,1,printF=1000,temp=1)
library(reshape2)
library(plyr)
library(ggplot2)
library(foreach)
library(doMC)
registerDoMC(5)  #change the 2 to your number of CPU cores
getDoParWorkers()
setwd("~/Documents/Fluscape/serosolver/scripts/testing/coin_toss")
source("model_funcs.R")
source("probability_funcs.R")
source("proposal_funcs.R")
source("mcmc_funcs.R")
source("mcmc_funcs_marginal.R")
## Input parameters
n <- 10
coin_probs <- runif(n,0,0.2)
indivs <- 50
samps <- seq(1,n, by=1)
pars <- c(4, 0.3, 1)
fixed <- c(0,0,0)
fixed_probs <- rep(0,n)
#fixed_probs[1:2] <- 0
covMat_theta <- diag(length(fixed[which(fixed==0)]))
covMat_probs <- diag(length(fixed_probs[which(fixed_probs==0)]))
iter <- 50000
## Setup parameter names and simulated data
parNames <- c("boost","sigma","error")
coin_results <- sapply(coin_probs, function(x) sample(c(0,1),indivs,prob=c(1-x,x),replace=TRUE))
data_suggested_coins <- colSums(coin_results)/nrow(coin_results)
dat <- coin_toss_group(pars, coin_results)
dat <- measurement_error_group(pars,dat)
print(paste0("Coin probs: ", paste0(signif(coin_probs,3),collapse=" ")))
print(paste0("Data suggest coin values: ", paste0(data_suggested_coins,collapse=" ")))
startPars <- pars
startPars[1] <- runif(1,0,10)
startPars[2] <- runif(1,0,1)
startPars[3] <- runif(1,0,5)
startPars[which(fixed == 1)] <- pars[which(fixed == 1)]
startProbs <- runif(n,0,1)
startProbs[which(fixed_probs == 1)] <- coin_probs[which(fixed_probs == 1)]
start_coins <- matrix(sample(c(0,1),n*indivs,replace=TRUE,prob = c(0.99,0.01)),nrow=indivs)
res <- run_MCMC_group(startPars, startProbs, fixed, fixed_probs, start_coins,dat,samps, iter,
covMat_theta, covMat_probs, thin=100,0.01,0.001,500,1,printF=1000,temp=1)
chain <- res[[2]]
tmp <- res[[3]]
colnames(chain) <- c("sampno","mu","cr","sd",paste0("prob.",1:n))
y <- extract_number_infections_from_chain(tmp, n, TRUE)
y1 <- extract_number_infections_from_chain(tmp, n, FALSE)
chain <- merge(chain,y, by="sampno")
chain <- merge(chain,y1,by="sampno")
plot(coda::as.mcmc(chain[floor(0.4*nrow(chain)):nrow(chain),]))
library(reshape2)
library(plyr)
library(ggplot2)
library(foreach)
library(doMC)
registerDoMC(5)  #change the 2 to your number of CPU cores
getDoParWorkers()
setwd("~/Documents/Fluscape/serosolver/scripts/testing/coin_toss")
source("model_funcs.R")
source("probability_funcs.R")
source("proposal_funcs.R")
source("mcmc_funcs.R")
source("mcmc_funcs_marginal.R")
## Input parameters
n <- 10
coin_probs <- runif(n,0,0.2)
indivs <- 100
samps <- seq(1,n, by=1)
pars <- c(4, 0.3, 1)
fixed <- c(0,0,0)
fixed_probs <- rep(0,n)
#fixed_probs[1:2] <- 0
covMat_theta <- diag(length(fixed[which(fixed==0)]))
covMat_probs <- diag(length(fixed_probs[which(fixed_probs==0)]))
iter <- 200000
## Setup parameter names and simulated data
parNames <- c("boost","sigma","error")
coin_results <- sapply(coin_probs, function(x) sample(c(0,1),indivs,prob=c(1-x,x),replace=TRUE))
data_suggested_coins <- colSums(coin_results)/nrow(coin_results)
dat <- coin_toss_group(pars, coin_results)
dat <- measurement_error_group(pars,dat)
print(paste0("Coin probs: ", paste0(signif(coin_probs,3),collapse=" ")))
print(paste0("Data suggest coin values: ", paste0(data_suggested_coins,collapse=" ")))
startPars <- pars
startPars[1] <- runif(1,0,10)
startPars[2] <- runif(1,0,1)
startPars[3] <- runif(1,0,5)
startPars[which(fixed == 1)] <- pars[which(fixed == 1)]
startProbs <- runif(n,0,1)
startProbs[which(fixed_probs == 1)] <- coin_probs[which(fixed_probs == 1)]
start_coins <- matrix(sample(c(0,1),n*indivs,replace=TRUE,prob = c(0.99,0.01)),nrow=indivs)
res <- run_MCMC_group(startPars, startProbs, fixed, fixed_probs, start_coins,dat,samps, iter,
covMat_theta, covMat_probs, thin=100,0.01,0.001,500,1,printF=1000,temp=1)
library(reshape2)
library(plyr)
library(ggplot2)
library(foreach)
library(doMC)
registerDoMC(5)  #change the 2 to your number of CPU cores
getDoParWorkers()
setwd("~/Documents/Fluscape/serosolver/scripts/testing/coin_toss")
source("model_funcs.R")
source("probability_funcs.R")
source("proposal_funcs.R")
source("mcmc_funcs.R")
source("mcmc_funcs_marginal.R")
## Input parameters
n <- 10
coin_probs <- runif(n,0,0.2)
indivs <- 250
samps <- seq(1,n, by=1)
pars <- c(4, 0.3, 1)
fixed <- c(0,0,0)
fixed_probs <- rep(0,n)
#fixed_probs[1:2] <- 0
covMat_theta <- diag(length(fixed[which(fixed==0)]))
covMat_probs <- diag(length(fixed_probs[which(fixed_probs==0)]))
iter <- 200000
## Setup parameter names and simulated data
parNames <- c("boost","sigma","error")
coin_results <- sapply(coin_probs, function(x) sample(c(0,1),indivs,prob=c(1-x,x),replace=TRUE))
data_suggested_coins <- colSums(coin_results)/nrow(coin_results)
dat <- coin_toss_group(pars, coin_results)
dat <- measurement_error_group(pars,dat)
print(paste0("Coin probs: ", paste0(signif(coin_probs,3),collapse=" ")))
print(paste0("Data suggest coin values: ", paste0(data_suggested_coins,collapse=" ")))
startPars <- pars
startPars[1] <- runif(1,0,10)
startPars[2] <- runif(1,0,1)
startPars[3] <- runif(1,0,5)
startPars[which(fixed == 1)] <- pars[which(fixed == 1)]
startProbs <- runif(n,0,1)
startProbs[which(fixed_probs == 1)] <- coin_probs[which(fixed_probs == 1)]
start_coins <- matrix(sample(c(0,1),n*indivs,replace=TRUE,prob = c(0.99,0.01)),nrow=indivs)
res <- run_MCMC_group(startPars, startProbs, fixed, fixed_probs, start_coins,dat,samps, iter,
covMat_theta, covMat_probs, thin=100,0.01,0.001,500,1,printF=1000,temp=1)
res1 <- run_MCMC_group(startPars, startProbs, fixed, fixed_probs, start_coins,dat,samps, iter,
covMat_theta, covMat_probs, thin=100,0.01,0.001,500,100000,printF=1000,temp=1)
chain <- res[[2]]
tmp <- res[[3]]
colnames(chain) <- c("sampno","mu","cr","sd",paste0("prob.",1:n))
y <- extract_number_infections_from_chain(tmp, n, TRUE)
y1 <- extract_number_infections_from_chain(tmp, n, FALSE)
chain <- merge(chain,y, by="sampno")
chain <- merge(chain,y1,by="sampno")
#plot(coda::as.mcmc(chain[floor(0.4*nrow(chain)):nrow(chain),]))
chain1 <- res1[[2]]
tmp1 <- res1[[3]]
colnames(chain1) <- c("sampno","mu","cr","sd",paste0("prob.",1:n))
y <- extract_number_infections_from_chain(tmp1, n, TRUE)
y1 <- extract_number_infections_from_chain(tmp1, n, FALSE)
chain1 <- merge(chain1,y, by="sampno")
chain1 <- merge(chain1,y1,by="sampno")

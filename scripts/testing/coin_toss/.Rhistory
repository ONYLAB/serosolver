p2 <- ggplot(tmp) +
geom_pointrange(aes(x=runID,y=Median,ymax=`X97.5..CI`,ymin=`X2.5..CI`, col=`Cross.Reactivity`)) +
facet_wrap(~Parameter.name,nrow=2) +
geom_abline(xintercept=c(0,1))+
theme(axis.text.x=element_text(angle=90,hjust=1)) +
ylab(paste0("Estimate for ρ")) +
coord_cartesian(ylim=c(0,1))
?geom_abline
p2 <- ggplot(tmp) +
geom_pointrange(aes(x=runID,y=Median,ymax=`X97.5..CI`,ymin=`X2.5..CI`, col=`Cross.Reactivity`)) +
facet_wrap(~Parameter.name,nrow=2) +
geom_vline(xintercept=c(0,1))+
theme(axis.text.x=element_text(angle=90,hjust=1)) +
ylab(paste0("Estimate for ρ")) +
coord_cartesian(ylim=c(0,1))
p2
p2 <- ggplot(tmp) +
geom_pointrange(aes(x=runID,y=Median,ymax=`X97.5..CI`,ymin=`X2.5..CI`, col=`Cross.Reactivity`)) +
facet_wrap(~Parameter.name,nrow=2) +
geom_hline(xintercept=c(0,1))+
theme(axis.text.x=element_text(angle=90,hjust=1)) +
ylab(paste0("Estimate for ρ")) +
coord_cartesian(ylim=c(0,1))
p2
p2 <- ggplot(tmp) +
geom_pointrange(aes(x=runID,y=Median,ymax=`X97.5..CI`,ymin=`X2.5..CI`, col=`Cross.Reactivity`)) +
facet_wrap(~Parameter.name,nrow=2) +
geom_hline(yintercept=c(0,1),linetype="dashed")+
theme(axis.text.x=element_text(angle=90,hjust=1)) +
ylab(paste0("Estimate for ρ")) +
coord_cartesian(ylim=c(0,1))
p2
cairo_ps(paste0(res_wd,"FigS9.eps"),width=6,height=5,family="Arial")
print(p2)
dev.off()
m_p <- combined_density_plot(all_estimates, "m","m",0,0.25,0,12,saveDir=res_wd,savePNG=TRUE,saveEPS=TRUE, fillBy=NULL)
cairo_ps(paste0(res_wd,"FigS7.eps"),width=6,height=5,family="Arial")
print(m_p)
dev.off()
m_p <- combined_density_plot(all_estimates, "m","m",0,0.25,0,12,saveDir=res_wd,savePNG=TRUE,saveEPS=TRUE, fillBy="Cross.Reactivity")
cairo_ps(paste0(res_wd,"FigS7.eps"),width=6,height=5,family="Arial")
print(m_p)
dev.off()
sigma_p <- combined_density_plot(all_estimates, "σ","σ",0,10,0,100,saveDir=res_wd,savePNG=TRUE,saveEPS=TRUE, blueLine=5,redLine=1, fillBy="Cross.Reactivity") +
theme(axis.text.x=element_text(angle=90,hjust=1))
sigma_p
cairo_ps(paste0(res_wd,"FigS8.eps"),width=6,height=5,family="Arial")
print(sigma_p)
dev.off()
p2 <- ggplot(tmp) +
geom_pointrange(aes(x=runID,y=Median,ymax=`X97.5..CI`,ymin=`X2.5..CI`, col=`Cross.Reactivity`)) +
facet_wrap(~Parameter.name,nrow=1) +
geom_hline(yintercept=c(0,1),linetype="dashed")+
theme(axis.text.x=element_text(angle=90,hjust=1)) +
ylab(paste0("Estimate for ρ")) +
coord_cartesian(ylim=c(0,1))
cairo_ps(paste0(res_wd,"FigS9.eps"),width=6,height=5,family="Arial")
print(p2)
dev.off()
cairo_ps(paste0(res_wd,"FigS9.eps"),width=6,height=3,family="Arial")
print(p2)
dev.off()
p2 <- ggplot(tmp) +
geom_pointrange(aes(x=runID,y=Median,ymax=`X97.5..CI`,ymin=`X2.5..CI`, col=`Cross.Reactivity`)) +
facet_wrap(~Parameter.name,nrow=1) +
geom_hline(yintercept=c(0,1),linetype="dashed")+
theme(axis.text.x=element_text(angle=90,hjust=1),
legend.position="none") +
ylab(paste0("Estimate for ρ")) +
coord_cartesian(ylim=c(0,1))
cairo_ps(paste0(res_wd,"FigS9.eps"),width=6,height=3,family="Arial")
print(p2)
dev.off()
cairo_ps(paste0(res_wd,"FigS10.eps"),width=6,height=3,family="Arial")
print(ymax_p)
dev.off()
cairo_ps(paste0(res_wd,"FigS11.eps"),width=6,height=3,family="Arial")
print(boostlim_p)
dev.off()
head(tmp)
unique(all_estimates$Parameter.name)
tmp1 <- all_estimates[all_estimates$Parameter.name %in% c("γ"),]
tmp1$Parameter.name <- as.character(tmp1$Parameter.name)
p3 <- ggplot(tmp1) +
geom_pointrange(aes(x=runID,y=Median,ymax=`X97.5..CI`,ymin=`X2.5..CI`, col=`Cross.Reactivity`)) +
geom_hline(yintercept=c(-1,1),linetype="dashed")+
theme(axis.text.x=element_text(angle=90,hjust=1),
legend.position="none") +
ylab(paste0("Estimate for ρ")) +
coord_cartesian(ylim=c(0,1))
p3
p3 <- ggplot(tmp1) +
geom_pointrange(aes(x=runID,y=Median,ymax=`X97.5..CI`,ymin=`X2.5..CI`, col=`Cross.Reactivity`)) +
geom_hline(yintercept=c(-1,1),linetype="dashed")+
theme(axis.text.x=element_text(angle=90,hjust=1),
legend.position="none") +
ylab(paste0("Estimate for γ")) +
coord_cartesian(ylim=c(-1,1))
p3
tmp2 <- all_estimates[all_estimates$Parameter.name %in% c("y_limit"),]
tmp2$Parameter.name <- as.character(tmp2$Parameter.name)
p4 <- ggplot(tmp2) +
geom_pointrange(aes(x=runID,y=Median,ymax=`X97.5..CI`,ymin=`X2.5..CI`, col=`Cross.Reactivity`)) +
facet_wrap(~Parameter.name,nrow=1) +
geom_hline(yintercept=c(0,12),linetype="dashed")+
theme(axis.text.x=element_text(angle=90,hjust=1),
legend.position="none") +
ylab(paste0("Estimate for ρ")) +
coord_cartesian(ylim=c(0,12))
p4
p4 <- ggplot(tmp2) +
geom_pointrange(aes(x=runID,y=Median,ymax=`X97.5..CI`,ymin=`X2.5..CI`, col=`Cross.Reactivity`)) +
geom_hline(yintercept=c(0,12),linetype="dashed")+
theme(axis.text.x=element_text(angle=90,hjust=1),
legend.position="none") +
ylab(paste0("Estimate for ρ")) +
coord_cartesian(ylim=c(0,12))
p4
p4 <- ggplot(tmp2) +
geom_pointrange(aes(x=runID,y=Median,ymax=`X97.5..CI`,ymin=`X2.5..CI`, col=`Cross.Reactivity`)) +
geom_hline(yintercept=c(0,12),linetype="dashed")+
theme(axis.text.x=element_text(angle=90,hjust=1),
legend.position="none") +
ylab(paste0("Estimate for y_limit")) +
coord_cartesian(ylim=c(0,12))
p4
p3 <- ggplot(tmp1) +
geom_pointrange(aes(x=runID,y=Median,ymax=`X97.5..CI`,ymin=`X2.5..CI`, col=`Cross.Reactivity`)) +
geom_hline(yintercept=c(-1,1),linetype="dashed")+
theme(axis.text.x=element_text(angle=90,hjust=1),
legend.position="none") +
ylab(paste0("Estimate for γ")) +
xlab("")+
coord_cartesian(ylim=c(-1,1))
tmp2 <- all_estimates[all_estimates$Parameter.name %in% c("y_limit"),]
tmp2$Parameter.name <- as.character(tmp2$Parameter.name)
p4 <- ggplot(tmp2) +
geom_pointrange(aes(x=runID,y=Median,ymax=`X97.5..CI`,ymin=`X2.5..CI`, col=`Cross.Reactivity`)) +
geom_hline(yintercept=c(0,12),linetype="dashed")+
theme(axis.text.x=element_text(angle=90,hjust=1),
legend.position="none") +
ylab(paste0("Estimate for y_limit")) +
xlab("") +
coord_cartesian(ylim=c(0,12))
cairo_ps(paste0(res_wd,"FigS10.eps"),width=6,height=3,family="Arial")
cowplot::plot_grid(p3,p4,ncol=2)
dev.off()
beta_p
unique(all_estimates$Parameter.name)
p4 <- ggplot(tmp3) +
geom_pointrange(aes(x=runID,y=Median,ymax=`X97.5..CI`,ymin=`X2.5..CI`, col=`Cross.Reactivity`)) +
geom_hline(yintercept=c(0,1,5,10),linetype="dashed",col=c("black","red","blue","black"))+
theme(axis.text.x=element_text(angle=90,hjust=1),
legend.position="none") +
ylab(paste0("Estimate for β")) +
xlab("") +
coord_cartesian(ylim=c(0,10))
tmp3 <- all_estimates[all_estimates$Parameter.name %in% c("β"),]
tmp3$Parameter.name <- as.character(tmp3$Parameter.name)
beta_p <- ggplot(tmp3) +
geom_pointrange(aes(x=runID,y=Median,ymax=`X97.5..CI`,ymin=`X2.5..CI`, col=`Cross.Reactivity`)) +
geom_hline(yintercept=c(0,1,5,10),linetype="dashed",col=c("black","red","blue","black"))+
theme(axis.text.x=element_text(angle=90,hjust=1),
legend.position="none") +
ylab(paste0("Estimate for β")) +
xlab("") +
coord_cartesian(ylim=c(0,10))
beta_p
beta_p <- ggplot(tmp3) +
geom_pointrange(aes(x=runID,y=Median,ymax=`X97.5..CI`,ymin=`X2.5..CI`)) +
geom_hline(yintercept=c(0,1,5,10),linetype="dashed",col=c("black","red","blue","black"))+
theme(axis.text.x=element_text(angle=90,hjust=1),
legend.position="none") +
ylab(paste0("Estimate for β")) +
xlab("") +
coord_cartesian(ylim=c(0,10))
beta_p
beta_p <- ggplot(tmp3) +
geom_pointrange(aes(x=runID,y=Median,ymax=`X97.5..CI`,ymin=`X2.5..CI`)) +
geom_hline(yintercept=c(0,1,5,10),linetype="dashed",col=c("black","red","blue","black"))+
theme(axis.text.x=element_text(angle=45,hjust=1),
legend.position="none") +
ylab(paste0("Estimate for β")) +
xlab("") +
coord_cartesian(ylim=c(0,10))
beta_p
cairo_ps(paste0(res_wd,"FigS11.eps"),width=6,height=3,family="Arial")
print(beta_p)
dev.off()
cairo_ps(paste0(res_wd,"FigS11.eps"),width=6,height=4,family="Arial")
print(beta_p)
dev.off()
knitr::opts_chunk$set(echo = TRUE,eval=TRUE)
female_hb_pre <- anaemia[anaemia$sex=="Female","hb_pre"]
knitr::opts_chunk$set(echo = TRUE,eval=TRUE)
male_hb_pre <- anaemia[anaemia$sex=="Male","hb_pre"]
female_hb_pre <- anaemia[anaemia$sex=="Female","hb_pre"]
male_hb_pre <- anaemia[anaemia$sex=="Male","hb_pre"]
knitr::opts_chunk$set(echo = TRUE,eval=TRUE)
anaemia <- read.csv("data/anaemia.csv",stringsAsFactors=TRUE)
hist(anaemia$hb_pre) # Look at the distributions - see below - near-enough Normal
## Calculate 95% confidence intervals
hb_pre_mean <- mean(anaemia$hb_pre) # Find mean of data
hb_pre_sd <- sd(anaemia$hb_pre) # Find standard deviation of data
hb_pre_n <- length(anaemia$hb_pre) # Find sample size
error <- qnorm(0.975)*hb_pre_sd/sqrt(hb_pre_n) # Calculate the Z-score for a 95% confidence interval
# Calculate lower and upper 95% confidence intervals
lower_conf <- hb_pre_mean - error
upper_conf <- hb_pre_mean + error
death_table <- table(anaemia$death) # View data
n_alive <- death_table[1]
n_died <- death_table[2]
n <- n_alive + n_died
prop.test(n_died, n, conf.level=0.95)
hist(anaemia$hb_pre) # Look at the distrution of per-operation haemoglobin levels
t.test(x=anaemia$hb_pre, mu=120) # Compare mean haemoglobin levels to fixed value of 120
hist(anaemia[anaemia$sex == "Female","hb_pre"]) # Look at the distrution of per-operation haemoglobin levels in women
t.test(x=anaemia[anaemia$sex == "Female","hb_pre"], mu=120) # Compare mean haemoglobin levels to fixed value of 120
female_hb_pre <- anaemia[anaemia$sex=="Female","hb_pre"]
male_hb_pre <- anaemia[anaemia$sex=="Male","hb_pre"]
hist(female_hb_pre)
hist(male_hb_pre)
t.test(female_hb_pre, male_hb_pre)
t.test(anaemia$hb_pre, anaemia$hb_post)
t.test(anaemia$hb_diff,mu=0)
anaemia$hb_diff <- anaemia$hb_post - anaemia$hb_pre # Create a new variable for the change in hb levels for each individual
t.test(anaemia$hb_pre, anaemia$hb_post)
?sample
run_sim <- function(n, m){
unique_res <- NULL
count <- 0
while(length(unique_res < m)){
res <- sample(n,m,replace=FALSE)
unique_res <- unique(c(unique_res, res))
count <- count + 1
}
return(count)
}
run_sim(24,8)
run_sim(24,8)
run_sim(24,8)
run_sim(24,8)
run_sim(24,8)
run_sim <- function(n, m){
unique_res <- NULL
count <- 0
while(length(unique_res) < m){
res <- sample(n,m,replace=FALSE)
unique_res <- unique(c(unique_res, res))
count <- count + 1
}
return(count)
}
run_sim(24,8)
run_sim(24,8)
run_sim(24,8)
run_sim(24,8)
run_sim(24,8)
run_sim(24,8)
run_sim(24,8)
run_sim(24,8)
run_sim(24,8)
run_sim(24,8)
run_sim <- function(n, m){
unique_res <- NULL
count <- 0
while(length(unique_res) < m){
res <- sample(n,m,replace=FALSE)
unique_res <- unique(c(unique_res, res))
print(unique_res)
count <- count + 1
}
return(count)
}
run_sim(24,8)
run_sim <- function(n, m){
unique_res <- NULL
count <- 0
while(length(unique_res) < n){
res <- sample(n,m,replace=FALSE)
unique_res <- unique(c(unique_res, res))
print(unique_res)
count <- count + 1
}
return(count)
}
run_sim(24,8)
run_sim <- function(n, m){
unique_res <- NULL
count <- 0
while(length(unique_res) < n){
res <- sample(n,m,replace=FALSE)
unique_res <- unique(c(unique_res, res))
print(unique_res)
count <- count + 1
}
return(count)
}
run_sim(24,8)
run_sim <- function(n, m){
unique_res <- NULL
count <- 0
while(length(unique_res) < n){
res <- sample(n,m,replace=FALSE)
unique_res <- unique(c(unique_res, res))
print(unique_res)
count <- count + 1
}
return(count)
}
run_sim(24,8)
run_sim <- function(n, m){
unique_res <- NULL
count <- 0
while(length(unique_res) < n){
res <- sample(n,m,replace=FALSE)
unique_res <- unique(c(unique_res, res))
print(unique_res)
count <- count + 1
}
return(count)
}
run_sim(24,8)
run_sim <- function(n, m){
unique_res <- NULL
count <- 0
while(length(unique_res) < n){
res <- sample(n,m,replace=FALSE)
unique_res <- unique(c(unique_res, res))
print(unique_res)
count <- count + 1
}
return(count)
}
run_sim(24,8)
run_sim <- function(n, m){
unique_res <- NULL
count <- 0
while(length(unique_res) < n){
res <- sample(n,m,replace=FALSE)
unique_res <- unique(c(unique_res, res))
print(unique_res)
count <- count + 1
}
return(count)
}
run_sim(24,8)
run_sim <- function(n, m){
unique_res <- NULL
count <- 0
while(length(unique_res) < n){
res <- sample(n,m,replace=FALSE)
unique_res <- unique(c(unique_res, res))
print(unique_res)
count <- count + 1
}
return(count)
}
run_sim(24,8)
run_sim <- function(n, m){
unique_res <- NULL
count <- 0
while(length(unique_res) < n){
res <- sample(n,m,replace=FALSE)
unique_res <- unique(c(unique_res, res))
count <- count + 1
}
return(count)
}
res <- NULL
for(i in 1:1000){
res <- c(res, run_sim(24,8))
}
hist(res)
mean(res)
run_sim <- function(n, m){
unique_res <- NULL
count <- 0
while(length(unique_res) < n){
res <- sample(n,m,replace=FALSE)
unique_res <- unique(c(unique_res, res))
count <- count + 1
}
return(count)
}
res <- NULL
for(i in 1:1000){
res <- c(res, run_sim(24,8))
}
run_sim <- function(n, m){
unique_res <- NULL
count <- 0
while(length(unique_res) < n){
res <- sample(n,m,replace=FALSE)
unique_res <- unique(c(unique_res, res))
count <- count + 1
}
return(count)
}
res <- NULL
for(i in 1:10000){
res <- c(res, run_sim(24,8))
}
hist(res)
summary(res)
density(res)
plot(density(res))
library(reshape2)
library(plyr)
library(ggplot2)
library(foreach)
library(doMC)
setwd("~/Documents/Fluscape/serosolver/scripts/testing/coin_toss")
devtools::load_all()
source("~/net/home/coinflip/scripts/model_funcs.R")
source("~/net/home/coinflip/scripts/probability_funcs.R")
source("~/net/home/coinflip/scripts/proposal_funcs.R")
source("~/net/home/coinflip/scripts/proposal_theta.R")
source("~/net/home/coinflip/scripts/mcmc_funcs.R")
source("~/net/home/coinflip/scripts/mcmc_funcs_gibbs.R")
library(coda)
## Input parameters
n <- 10
max_n <- 10
coin_probs <- runif(n,0,0.2)
max_indiv <- 5
indivs <- 10
samps <- seq(1,n, by=1)
pars <- c(4, 0.3, 1)
fixed <- c(0,0,0)
fixed_probs <- rep(0,n)
#fixed_probs[1:2] <- 0
covMat_theta <- diag(length(fixed[which(fixed==0)]))
covMat_probs <- diag(length(fixed_probs[which(fixed_probs==0)]))
iter <- 50000
thin <- 100
## Setup parameter names and simulated data
parNames <- c("boost","sigma","error")
coin_results <- sapply(coin_probs, function(x) sample(c(0,1),indivs,prob=c(1-x,x),replace=TRUE))
data_suggested_coins <- colSums(coin_results)/nrow(coin_results)
dat <- coin_toss_group(pars, coin_results)
dat <- measurement_error_group(pars,dat)
real_pars <- pars
real_coin_results <- coin_results
real_heads <- colSums(real_coin_results)
real_heads <- c(real_heads, sum(real_heads))
## Generate starting conditions
startPars <- pars
startPars[1] <- runif(1,0,10)
startPars[2] <- runif(1,0,1)
startPars[3] <- runif(1,0,5)
startPars[which(fixed == 1)] <- pars[which(fixed == 1)]
startProbs <- runif(n,0,1)
startProbs[which(fixed_probs == 1)] <- coin_probs[which(fixed_probs == 1)]
start_coins <- matrix(sample(c(0,1),n*indivs,replace=TRUE,prob = c(0.9,0.1)),nrow=indivs)
covMat_theta <- diag(length(fixed[which(fixed==0)]))
pars <- startPars
pars <- real_pars
infection_history_proposal_gibbs()
infection_history_proposal_gibbs(pars, coin_results, 10,10,rep(1,10),rep(10,10),1,1)
library(reshape2)
library(plyr)
library(ggplot2)
library(foreach)
library(doMC)
setwd("~/Documents/Fluscape/serosolver/scripts/testing/coin_toss")
devtools::load_all()
source("~/net/home/coinflip/scripts/model_funcs.R")
source("~/net/home/coinflip/scripts/probability_funcs.R")
source("~/net/home/coinflip/scripts/proposal_funcs.R")
source("~/net/home/coinflip/scripts/proposal_theta.R")
source("~/net/home/coinflip/scripts/mcmc_funcs.R")
source("~/net/home/coinflip/scripts/mcmc_funcs_gibbs.R")
library(coda)
## Input parameters
n <- 10
max_n <- 10
coin_probs <- runif(n,0,0.2)
max_indiv <- 5
indivs <- 10
samps <- seq(1,n, by=1)
pars <- c(4, 0.3, 1)
fixed <- c(0,0,0)
fixed_probs <- rep(0,n)
#fixed_probs[1:2] <- 0
covMat_theta <- diag(length(fixed[which(fixed==0)]))
covMat_probs <- diag(length(fixed_probs[which(fixed_probs==0)]))
iter <- 50000
thin <- 100
## Setup parameter names and simulated data
parNames <- c("boost","sigma","error")
coin_results <- sapply(coin_probs, function(x) sample(c(0,1),indivs,prob=c(1-x,x),replace=TRUE))
data_suggested_coins <- colSums(coin_results)/nrow(coin_results)
dat <- coin_toss_group(pars, coin_results)
dat <- measurement_error_group(pars,dat)
real_pars <- pars
real_coin_results <- coin_results
real_heads <- colSums(real_coin_results)
real_heads <- c(real_heads, sum(real_heads))
## Generate starting conditions
startPars <- pars
startPars[1] <- runif(1,0,10)
startPars[2] <- runif(1,0,1)
startPars[3] <- runif(1,0,5)
startPars[which(fixed == 1)] <- pars[which(fixed == 1)]
startProbs <- runif(n,0,1)
startProbs[which(fixed_probs == 1)] <- coin_probs[which(fixed_probs == 1)]
start_coins <- matrix(sample(c(0,1),n*indivs,replace=TRUE,prob = c(0.9,0.1)),nrow=indivs)
covMat_theta <- diag(length(fixed[which(fixed==0)]))
pars <- startPars
pars <- real_pars
infection_history_proposal_gibbs(pars, coin_results, 10,10,rep(1,10),rep(10,10),1,1)

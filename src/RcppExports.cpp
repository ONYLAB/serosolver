// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// infection_model_indiv
NumericVector infection_model_indiv(NumericVector theta, NumericVector infectionHistory, double samplingTime, NumericVector strainIsolationTimes, IntegerVector virusIndices, NumericVector antigenicMapLong, NumericVector antigenicMapShort, int numberStrains);
RcppExport SEXP _serosolver_infection_model_indiv(SEXP thetaSEXP, SEXP infectionHistorySEXP, SEXP samplingTimeSEXP, SEXP strainIsolationTimesSEXP, SEXP virusIndicesSEXP, SEXP antigenicMapLongSEXP, SEXP antigenicMapShortSEXP, SEXP numberStrainsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type infectionHistory(infectionHistorySEXP);
    Rcpp::traits::input_parameter< double >::type samplingTime(samplingTimeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type strainIsolationTimes(strainIsolationTimesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type virusIndices(virusIndicesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type antigenicMapLong(antigenicMapLongSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type antigenicMapShort(antigenicMapShortSEXP);
    Rcpp::traits::input_parameter< int >::type numberStrains(numberStrainsSEXP);
    rcpp_result_gen = Rcpp::wrap(infection_model_indiv(theta, infectionHistory, samplingTime, strainIsolationTimes, virusIndices, antigenicMapLong, antigenicMapShort, numberStrains));
    return rcpp_result_gen;
END_RCPP
}
// likelihood_titre
double likelihood_titre(NumericVector expected, NumericVector data, NumericVector theta);
RcppExport SEXP _serosolver_likelihood_titre(SEXP expectedSEXP, SEXP dataSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type expected(expectedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihood_titre(expected, data, theta));
    return rcpp_result_gen;
END_RCPP
}
// individual_likelihood
double individual_likelihood(NumericVector theta, NumericVector infectionHistory, NumericVector samplingTimes, IntegerVector indivIndices, NumericVector strainIsolationTimes, IntegerVector indivVirusIndices, NumericVector antigenicMapLong, NumericVector antigenicMapShort, NumericVector titres, int numberStrains);
RcppExport SEXP _serosolver_individual_likelihood(SEXP thetaSEXP, SEXP infectionHistorySEXP, SEXP samplingTimesSEXP, SEXP indivIndicesSEXP, SEXP strainIsolationTimesSEXP, SEXP indivVirusIndicesSEXP, SEXP antigenicMapLongSEXP, SEXP antigenicMapShortSEXP, SEXP titresSEXP, SEXP numberStrainsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type infectionHistory(infectionHistorySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type samplingTimes(samplingTimesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type indivIndices(indivIndicesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type strainIsolationTimes(strainIsolationTimesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type indivVirusIndices(indivVirusIndicesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type antigenicMapLong(antigenicMapLongSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type antigenicMapShort(antigenicMapShortSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type titres(titresSEXP);
    Rcpp::traits::input_parameter< int >::type numberStrains(numberStrainsSEXP);
    rcpp_result_gen = Rcpp::wrap(individual_likelihood(theta, infectionHistory, samplingTimes, indivIndices, strainIsolationTimes, indivVirusIndices, antigenicMapLong, antigenicMapShort, titres, numberStrains));
    return rcpp_result_gen;
END_RCPP
}
// group_likelihood_vector
NumericVector group_likelihood_vector(NumericVector theta, NumericMatrix infectionHistories, IntegerVector indicesSamples, IntegerVector indicesData, IntegerVector indicesDataOverall, NumericVector samplingTimes, NumericVector strainIsolationTimes, IntegerVector virusIndices, NumericVector antigenicMapLong, NumericVector antigenicMapShort, NumericVector titres);
RcppExport SEXP _serosolver_group_likelihood_vector(SEXP thetaSEXP, SEXP infectionHistoriesSEXP, SEXP indicesSamplesSEXP, SEXP indicesDataSEXP, SEXP indicesDataOverallSEXP, SEXP samplingTimesSEXP, SEXP strainIsolationTimesSEXP, SEXP virusIndicesSEXP, SEXP antigenicMapLongSEXP, SEXP antigenicMapShortSEXP, SEXP titresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type infectionHistories(infectionHistoriesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type indicesSamples(indicesSamplesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type indicesData(indicesDataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type indicesDataOverall(indicesDataOverallSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type samplingTimes(samplingTimesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type strainIsolationTimes(strainIsolationTimesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type virusIndices(virusIndicesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type antigenicMapLong(antigenicMapLongSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type antigenicMapShort(antigenicMapShortSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type titres(titresSEXP);
    rcpp_result_gen = Rcpp::wrap(group_likelihood_vector(theta, infectionHistories, indicesSamples, indicesData, indicesDataOverall, samplingTimes, strainIsolationTimes, virusIndices, antigenicMapLong, antigenicMapShort, titres));
    return rcpp_result_gen;
END_RCPP
}
// group_likelihood_total
double group_likelihood_total(NumericVector theta, NumericMatrix infectionHistories, IntegerVector indicesSamples, IntegerVector indicesData, IntegerVector indicesDataOverall, NumericVector samplingTimes, NumericVector strainIsolationTimes, IntegerVector virusIndices, NumericVector antigenicMapLong, NumericVector antigenicMapShort, NumericVector titres);
RcppExport SEXP _serosolver_group_likelihood_total(SEXP thetaSEXP, SEXP infectionHistoriesSEXP, SEXP indicesSamplesSEXP, SEXP indicesDataSEXP, SEXP indicesDataOverallSEXP, SEXP samplingTimesSEXP, SEXP strainIsolationTimesSEXP, SEXP virusIndicesSEXP, SEXP antigenicMapLongSEXP, SEXP antigenicMapShortSEXP, SEXP titresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type infectionHistories(infectionHistoriesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type indicesSamples(indicesSamplesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type indicesData(indicesDataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type indicesDataOverall(indicesDataOverallSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type samplingTimes(samplingTimesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type strainIsolationTimes(strainIsolationTimesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type virusIndices(virusIndicesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type antigenicMapLong(antigenicMapLongSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type antigenicMapShort(antigenicMapShortSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type titres(titresSEXP);
    rcpp_result_gen = Rcpp::wrap(group_likelihood_total(theta, infectionHistories, indicesSamples, indicesData, indicesDataOverall, samplingTimes, strainIsolationTimes, virusIndices, antigenicMapLong, antigenicMapShort, titres));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_serosolver_infection_model_indiv", (DL_FUNC) &_serosolver_infection_model_indiv, 8},
    {"_serosolver_likelihood_titre", (DL_FUNC) &_serosolver_likelihood_titre, 3},
    {"_serosolver_individual_likelihood", (DL_FUNC) &_serosolver_individual_likelihood, 10},
    {"_serosolver_group_likelihood_vector", (DL_FUNC) &_serosolver_group_likelihood_vector, 11},
    {"_serosolver_group_likelihood_total", (DL_FUNC) &_serosolver_group_likelihood_total, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_serosolver(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
